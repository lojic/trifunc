#!/usr/bin/env runhaskell

{-
 - The sequence of triangle numbers is generated by adding the
 - natural numbers. So the 7th triangle number would be 1 + 2 + 3 +
 - 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 - 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 - Let us list the factors of the first seven triangle numbers:

 -  1: 1
 -  3: 1,3
 -  6: 1,2,3,6
 - 10: 1,2,5,10
 - 15: 1,3,5,15
 - 21: 1,3,7,21
 - 28: 1,2,4,7,14,28
 - We can see that 28 is the first triangle number to have over
 - five divisors.

 - What is the value of the first triangle number to have over five
 - hundred divisors?
 -}

import Data.List (groupBy)

prob12 = head . dropWhile (\n -> numFactors n <= 500) $ triangles

triangles :: [Int]
triangles = scanl1 (+) [1..]

numFactors = product . map ((+1) . length) . groupBy (==) . primeFactors

primeFactors n = factors n primes
  where
    factors n xs'@(x:xs)
      | x*x > n   = [n]
      | r == 0    = x : factors q xs'
      | otherwise = factors n xs
      where (q, r) = n `divMod` x

primes = 2 : filter isPrime [3, 5..]

isPrime n = not . any (\i -> n `mod` i == 0) . takeWhile (\i -> i*i <= n) $ primes

-- 76576500
main = print prob12
