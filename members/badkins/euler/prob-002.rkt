#lang racket

;; ----------------------------------------------------------------------
;; Problem 2: Even Fibonacci numbers
;; https://projecteuler.net/problem=2

;; Each new term in the Fibonacci sequence is generated by adding the
;; previous two terms. By starting with 1 and 2, the first 10 terms
;; will be:

;; 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

;; By considering the terms in the Fibonacci sequence whose values do
;; not exceed four million, find the sum of the even-valued terms.

;; Answer: 4613732
;; ----------------------------------------------------------------------

;; This approach assumes the existence of a function to compute the
;; nth fibonacci number, and then simply iterates over the fibonacci
;; numbers and sums the even ones in an accumulator.

;; Efficient accumulator version of fibonacci from "The Scheme
;; Programming Language" by Kent Dybvig
(define (fibonacci n)
  (if (= n 0)
      0
      (let fib ([i n] [f2 1] [f1 0])
        (if (= i 1)
            f2
            (fib (- i 1) (+ f1 f2) f2)))))

;; Sum the even fibonacci numbers less than max
(define (sum-even-fib max)
  (let func ([n 1] [sum 0])
    (let ([fib (fibonacci n)])
      (if (> fib max)
          sum
          (func (+ n 1) (+ sum (if (even? fib) fib 0)))))))

(display (sum-even-fib 4000000))
